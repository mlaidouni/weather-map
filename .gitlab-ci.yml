stages:
  - build
  - deploy

variables:
  DEPLOY_USER: "ubuntu"          # utilisateur SSH sur le VPS
  DEPLOY_HOST: "37.187.49.205"        # IP ou domaine de ton VPS
  DEPLOY_PATH: "/home/ubuntu"    # chemin où exécuter docker sur VPS

# Build Front
build_front:
  image: node:20-alpine
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
    - docker build -t weathermap-frontend .
  tags:
    - weather-ci

# Build Back
build_back:
  image: maven:3.9.9-amazoncorretto-17-alpine
  stage: build
  script:
    - cd backend
    - mvn package
    - docker build -t weathermap-backend .
  tags:
    - weather-ci

# Deploy sur le VPS via SSH
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    # Pousser les images sur le VPS et lancer les conteneurs
    - scp -r frontend/Dockerfile backend/Dockerfile $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
        # Build et run des conteneurs
    - docker build -t weathermap-frontend $DEPLOY_PATH/frontend
    - docker stop weathermap-frontend || true
    - docker rm weathermap-frontend || true
    - docker run -d --name weathermap-frontend -p 3000:3000 --restart unless-stopped weathermap-frontend

    - docker build -t weathermap-backend $DEPLOY_PATH/backend
    - docker stop weathermap-backend || true
    - docker rm weathermap-backend || true
    - docker run -d --name weathermap-backend -p 8080:8080 --restart unless-stopped weathermap-backend
      EOF
  tags:
    - weather-ci
  needs:
    - build_front
    - build_back
